section
  h1 git
  h2 The Basics And Beyond
  p
      | by Matt Russell

section
  h2 What is git?
  p Created by Linus Torvalds for the Linux Kernel Source
  p Distributed Version Control Software
  p Snapshots vs Differences of file systems

section
  h2 Why is Version Control Software (VCS) Important?
  ol
    li.fragment Lifesaver if your code stops working
    li.fragment Good version control history is a story of your software
    li.fragment Github is "street cred" for programmers
  aside.notes it shows where it began, major milestones, and your thought
    process as well as the collaboration with others


section
  section
    h2 The Basics
    img height='400px' src="https://assets-cdn.github.com/images/modules/logos_page/Octocat.png" alt="Github Logo"

  section
    h2 Commit
    q<> &ldquo;A Snapshot in time of your directory&rdquo;
    p Unique hashcode
    p One or more parent commits
    p Additional MetaData (Author, Date, etc)
    pre< class="bash"
      code git commit -m "My First Commit"

  section
    h2 Commit Tree
    img height="400px" src="http://www.ossxp.com/doc/gotgit-en/images/en/fig-11-22-commit-tree-bisect.png"
    pre< class="bash"
      code git log --graph --all # shows a pretty graph with all branches

  section
    h2 Staging (Index)
    q<> &ldquo;Where files go before they become a commit&rdquo;
    p Move files to be staged (green) and un-staged (red)
    p Un-staged includes untracked files (files git doesn’t know about)
    pre< class="bash"
      code git add newFile # add newFile to index (and track if not tracked)
      code git add -u # Add all currently tracked files
      code git add . # Add all files in directory (recursive)
      code git reset HEAD newFile # Remove newFile from the index

  section
    h2 Branches
    p Reference a commit by a name
    p Branches move as you commit
    p Work separately on something until its ready
    ul
      small
        li bug fixes, features, etc. Read Gitflow!
    p Tags are just branches that don't move!
    pre< class="bash"
      code git branch -a # Display all branches
      code git checkout -b new-branch # Creates and checks out new-branch
      code git checkout bug-fix # Checkout bug-fix branch

  section
    h2 Remotes
    p Up until now everything was local!
    p But we want to share our beautiful code with the world!
    p Can have unlimited remotes, usually just ‘origin'
    pre< class="bash"
      code git remote add origin https://github.com/user/repo.git
      code git fetch # Fetches updates from remotes but doesn't apply
      code git push origin -u featureBranch # Pushes a new featureBranch and tracks changes
      code git pull origin # Tries to update the current branch (merge by default)

section
  section
    h2 Rebase vs Merge
    img.fragment height='400px' src="http://www.quickmeme.com/img/5a/5ad6c8f9897f923139508114de14254e39448111a2df182724814d9322721861.jpg"

  section
    h2 Merge
    p Create a new commit from two parents and merge the files
    p Very useful when adding a new feature
    p Clear point at which it was added (github Pull Requests)
    p Noisy when overused
    pre< class="bash"
      code git merge bug-fix # Merges branch 'bug-fix' into the current branch
      code git merge bug-fix --no-ff # No fast forward merges to show when it was merged
      code git merge bug-fix --ff-only # Only merge if fast forward will work

  section
    h2 Rebase
    p “Re-write history"
    p Squash serval WIP commits into a single commit
    p Makes you look like you knew what you were doing all along!
    p Tidy up your commit logs!
    ul
      small
        li fixup, squash, reword, edit, and reorder!
    pre< class="bash"
      code git rebase master # rebase current branch onto master
      code git rebase -i HEAD~2 # rewrite the past 2 commits
      code git rebase -i master bug-fix # checkout bug-fix branch and rebase onto master
      code git pull --rebase # Like regular git pull but tries to rebase (no silly merge)
      code git rebase --abort # If anything goes wrong!

  section
    h2 Rebase
    p Never do it on published (shared) branches
    img height='300px' src="http://media.giphy.com/media/xEpTspH9hGwHS/giphy.gif"

section
  section
    h2 Other Useful Commands
    img height='400px' src="https://ccistudentcenterblog.files.wordpress.com/2013/09/github-ninja.jpg"

  section
    h2 Checkout
    p Not just for moving between branches!
    p Grab a particular file from a commit
    pre< class="bash"
      code git checkout master -- file.txt # Get contents of file.txt from master
      code git checkout -- . # discard all unstaged changes

  section
    h2 Cherry-pick
    p Copy a commit to your branch
    pre< class="bash"
      code git cherry-pick d310dd # Apply the commit with hash d310dd to your branch


  section
    h2 Stash
    p The 'scratchpad'
    pre< class="bash"
      code git stash # Saves changes to the stash
      code git stash pop # Applies the top most changes
      code git stash save "Not Ready" # Gives the stash a better name
      code git stash list # List your stashes, top stash will be popped first
      code git stash show # Show what changed in your last stash

  section
    h2 Magical -p operator
    p View changes and split up large edits
    pre< class="bash"
      code git add -p # Choose what parts (hunks) are added
      code git log -p # Show the log with the diffs
      code git stash -p # Like add for the stash
      code git show defab4 -p # Show the changes from commit defab4

  section
    h2 Reset Soft
    p Sets the branch to a commit and all differences go to the index
    p Great way to 'undo' an unpublished commit
    pre< class="bash"
      code git reset --soft HEAD~1 # Undo the previous commit and keep changes

  section
    h2 Reset Hard
    p Sets the branch to a commit without preserving keeping the index
    pre< class="bash"
      code git reset --hard HEAD~1 # Undo the previous commit and discard changes
      code git reset --hard def8ad # Reset the current branch to a commit

  section
    h2 Reflog
    img height='300px' src="http://38.media.tumblr.com/409c1867f51a625386419af7b8d416cc/tumblr_n9srf9JBPA1rhuccro1_500.gif"
    pre< class="bash"
      code git reflog # Can reset to any of the hashes

section
  h2 Questions?
  img height='400px' src="https://octodex.github.com/images/riddlocat.png"

section
  h2 Useful Resources
  p
    a< href="https://git-scm.com/book" Git-SCM Online Book
  p
    a< href="https://try.github.io" Try Github (Interactive)
  p
    a< href="http://nvie.com/posts/a-successful-git-branching-model/" GitFlow by Vincent Driessen
